import torch
from torch import nn, optim
from torch.utils.data import DataLoader
import pandas as pd
import sklearn.metrics as metrics
from sklearn.preprocessing import LabelEncoder
a = {}
b = [1]
a[str(b)] = 1
a[str(b)] = 2
print(a)
# True..............
# 1912 - --------[21, 58],
# True..............
# 566 - --------[1, 22],
# True..............
# 1926 - --------[21, 72],
# True..............
# 3359 - --------[62, 70],
# True..............
# 2471 - --------[32, 67],
# True..............
# 2677 - --------[37, 63],
# True..............
# 1222 - --------[10, 39],
# True..............
# 2875 - --------[42, 76],
# True..............
# 2376 - --------[30, 63],
# True..............
# 3232 - --------[55, 69],
# True..............
# 3203 - --------[54, 62],
# True..............
# 1719 - --------[18, 36],
# True..............
# 2620 - --------[36, 46],
# True..............
# 1842 - --------[20, 44],
# True..............
# 1297 - --------[11, 48],
# False..............
# 182 - --------[30, 2],
# False..............
# 30 - --------[5, 0],
# True..............
# 616 - --------[1, 72],
# False..............
# 269 - --------[44, 5],
# True..............
# 888 - --------[5, 50],
# True..............
# 684 - --------[2, 65],
# True..............
# 2596 - --------[35, 63],
# True..............
# 2875 - --------[42, 76],
# True..............
# 2536 - --------[34, 45],
# True..............
# 780 - --------[4, 14],
# True..............
# 1085 - --------[8, 37],
# True..............
# 1008 - --------[7, 29],
# True..............
# 965 - --------[6, 56],
# True..............
# 1842 - --------[20, 44],
# True..............
# 780 - --------[4, 14],
# True..............
# 1373 - --------[12, 59],
# True..............
# 516 - --------[0, 48],
# True..............
# 2452 - --------[32, 48],
# True..............
# 2262 - --------[28, 44],
# False..............
# 221 - --------[36, 5],
# False..............
# 90 - --------[15, 0],
# True..............
# 595 - --------[1, 51],
# True..............
# 2713 - --------[38, 60],
# True..............
# 2055 - --------[24, 39],
# True..............
# 2452 - --------[32, 48],
# True..............
# 1681 - --------[17, 57],
# True..............
# 2933 - --------[44, 67],
# True..............
# 2584 - --------[35, 51],
# True..............
# 616 - --------[1, 72],
# True..............
# 2633 - --------[36, 59],
# True..............
# 2307 - --------[29, 41],
# True..............
# 1222 - --------[10, 39],
# True..............
# 2967 - --------[45, 69],
# True..............
# 715 - --------[3, 22],
# True..............
# 1844 - --------[20, 46],
# True..............
# 1373 - --------[12, 59],
# True..............
# 2734 - --------[39, 43],
# False..............
# 98 - --------[16, 2],
# True..............
# 1373 - --------[12, 59],
# True..............
# 2690 - --------[37, 76],
# True..............
# 2420 - --------[31, 61],
# False..............
# 348 - --------[58, 0],
# False..............
# 269 - --------[44, 5],
# True..............
# 595 - --------[1, 51],
# False..............
# 96 - --------[16, 0],
# True..............
# 1212 - --------[10, 29],
# True..............
# 2420 - --------[31, 61],
# True..............
# 865 - --------[5, 27],
# True..............
# 1008 - --------[7, 29],
# False..............
# 216 - --------[36, 0],
# True..............
# 3208 - --------[54, 67],
# True..............
# 2067 - --------[24, 51],
# False..............
# 197 - --------[32, 5],
# True..............
# 1297 - --------[11, 48],
# True..............
# 2410 - --------[31, 51],
# True..............
# 1008 - --------[7, 29],
# True..............
# 1373 - --------[12, 59],
# False..............
# 236 - --------[39, 2],
# True..............
# 2731 - --------[39, 40],
# True..............
# 3275 - --------[57, 71],
# True..............
# 2141 - --------[25, 73],
# True..............
# 3003 - --------[46, 74],
# True..............
# 2726 - --------[38, 73],
# True..............
# 478 - --------[0, 10],
# True..............
# 988 - --------[7, 9],
# 27478 - -------------------- 79 - -------- 7.3843410114768915


# import numpy as np
# import argparse
# import utils
# import mylayer
# from skimage.metrics import peak_signal_noise_ratio, structural_similarity
#
# cfg = {
#     "num_epochs": 5,
#     "start_epoch": 1,
#     "batch_size": 2,
#     "learning_rate": 1e-4,
#     "exp_name": "Image_Compressiong",
#     "base_dir": "/content/drive/My Drive",
#     "save_every": 200,
#     "shuffle": False,
#     "dataset_path": "/content/drive/My Drive/NWPU",
#     "device": "cuda",
#     "num_workers": 2,
#     "chkpt": 'model_P_SP2_32_32_32',
# }
#
#
# def test(cfg):
#     print("=== Testing ===")
#     model = mylayer.CAE_16(2)
#     model.load_state_dict(torch.load(f"{cfg.base_dir}/{cfg.exp_name}/chkpt/{cfg.chkpt}"))
#
#     model.eval()
#     if cfg.device == "cuda":
#         model.cuda()
#
#     print("Loaded model")
#
#     dataset = utils.ImageFolder720p(cfg.dataset_path)
#     dataloader = DataLoader(dataset, batch_size=1, shuffle=cfg.shuffle)
#
#     print("Loaded data")
#     psnr = []
#     ssim = []
#
#     for batch_idx, data in enumerate(dataloader, start=1):
#         img, patches, _ = data
#         if cfg.device == 'cuda':
#             patches = patches.cuda()
#
#         if batch_idx > 20:
#             return np.array(psnr), np.array(ssim)
#
#         out = torch.zeros(6, 10, 3, 128, 128)
#
#         for i in range(6):
#             for j in range(10):
#                 x = (patches[:, :, i, j, :, :]).cuda()
#                 y = model(x)
#                 out[i, j] = y.data
#
#         out = np.transpose(out, (0, 3, 1, 4, 2))
#         out = np.reshape(out, (768, 1280, 3))
#
#         ssim.append(structural_similarity(np.transpose(img[0].numpy(), (1, 2, 0)), out.numpy(), multichannel=True))
#
#         out = np.transpose(out, (2, 0, 1))
#
#         psnr.append(peak_signal_noise_ratio(img[0].numpy(), out.numpy()))
#
#         y = torch.cat((img[0], out), dim=2)
#         utils.save_imgs(imgs=y.unsqueeze(0), to_size=(3, 768, 2 * 1280),
#                         name=f"{cfg.base_dir}/{cfg.exp_name}/out/test_{batch_idx}.png")
#     return np.array(psnr), np.array(ssim)
#
#
# if __name__ == '__main__':
#     cfg = argparse.Namespace(**cfg)
#     test(cfg)
